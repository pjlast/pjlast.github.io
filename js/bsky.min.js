"use strict";class PostComment extends HTMLElement{constructor(){super()}connectedCallback(){this.attachShadow({mode:"open"}),this.innerHTML="Hello"}}async function getBlueskyPostThread(n,o){let e;try{const t=new URL("/xrpc/app.bsky.feed.getPostThread","https://public.api.bsky.app");t.search=`?uri=${encodeURIComponent(`at://${n}/app.bsky.feed.post/${o}`)}`,e=await fetch(t)}catch(t){throw new Error(`Fetch error: ${t} `)}if(!e.ok)throw new Error(`HTTP error: ${e.status} ${e.statusText} `);let r;try{r=await e.json()}catch(t){throw new Error(`Failed to parse JSON: ${t} `)}return r}class Post extends HTMLElement{constructor(){super()}async connectedCallback(){const o=this.attachShadow({mode:"open"}),e=this.getAttribute("profile");if(e===null){console.error("no profile attribute found on post-comments");return}const r=this.getAttribute("post");if(r===null){console.error("no post attribute found on post-comments");return}let t;try{t=await getBlueskyPostThread(e,r)}catch(p){console.error("Error while fetching thread:",p);return}const a=document.createElement("h2");a.textContent=t.thread.post.author.displayName,o.append(a);const s=document.createElement("img");s.src=t.thread.post.author.avatar,s.alt=t.thread.post.author.displayName,o.append(s);const c=document.createElement("p");c.textContent=t.thread.post.record.text,o.append(c),console.log(t)}}customElements.define("post-comment",PostComment),customElements.define("post-comments",Post);
